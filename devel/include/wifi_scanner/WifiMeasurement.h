// Generated by gencpp from file wifi_scanner/WifiMeasurement.msg
// DO NOT EDIT!


#ifndef WIFI_SCANNER_MESSAGE_WIFIMEASUREMENT_H
#define WIFI_SCANNER_MESSAGE_WIFIMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wifi_scanner
{
template <class ContainerAllocator>
struct WifiMeasurement_
{
  typedef WifiMeasurement_<ContainerAllocator> Type;

  WifiMeasurement_()
    : ssid()
    , bssid()
    , rssi(0.0)
    , stamp()  {
    }
  WifiMeasurement_(const ContainerAllocator& _alloc)
    : ssid(_alloc)
    , bssid(_alloc)
    , rssi(0.0)
    , stamp()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ssid_type;
  _ssid_type ssid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bssid_type;
  _bssid_type bssid;

   typedef float _rssi_type;
  _rssi_type rssi;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;




  typedef boost::shared_ptr< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct WifiMeasurement_

typedef ::wifi_scanner::WifiMeasurement_<std::allocator<void> > WifiMeasurement;

typedef boost::shared_ptr< ::wifi_scanner::WifiMeasurement > WifiMeasurementPtr;
typedef boost::shared_ptr< ::wifi_scanner::WifiMeasurement const> WifiMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wifi_scanner::WifiMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wifi_scanner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'wifi_scanner': ['/home/andreas/Workspaces/ros-workspace/src/wifi_scanner/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50748349ed213168558a6fc822d7f7f0";
  }

  static const char* value(const ::wifi_scanner::WifiMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50748349ed213168ULL;
  static const uint64_t static_value2 = 0x558a6fc822d7f7f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wifi_scanner/WifiMeasurement";
  }

  static const char* value(const ::wifi_scanner::WifiMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ssid\n\
string bssid\n\
float32 rssi\n\
time stamp\n\
";
  }

  static const char* value(const ::wifi_scanner::WifiMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ssid);
      stream.next(m.bssid);
      stream.next(m.rssi);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct WifiMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_scanner::WifiMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wifi_scanner::WifiMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "ssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ssid);
    s << indent << "bssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bssid);
    s << indent << "rssi: ";
    Printer<float>::stream(s, indent + "  ", v.rssi);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIFI_SCANNER_MESSAGE_WIFIMEASUREMENT_H
